{"version":3,"sources":["component/card_temp/card.component.jsx","component/Card/card-list.component.jsx","component/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","resp","json","users","setState","this","filteredMonsters","filter","monst","toLowerCase","includes","e","target","value","console","log","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,YAAK,SAAAC,GAAK,OACnB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCHbC,G,MAAS,SAAAR,GAAK,OACvB,qBAAKC,UAAU,YAAf,SACFD,EAAMI,QAAQK,KAAI,SAAAL,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCHRK,G,MAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACpB,uBAAOX,UAAU,SAChBY,KAAK,SACJF,YAAaA,EACZG,SAAUF,MCgCFG,E,kDAjCd,aAAc,IAAD,8BACZ,gBACKC,MAAM,CACTZ,QAAQ,GACRa,YAAY,IAJF,E,gEAMQ,IAAD,OACjBC,MAAM,8CAA8CC,MAAK,SAAAC,GAAI,OAAEA,EAAKC,UACpEF,MAAK,SAAAG,GAAK,OAAE,EAAKC,SAAS,CAACnB,QAAQkB,S,+BAE5B,IAAD,SACyBE,KAAKR,MAA7BZ,EADD,EACCA,QAASa,EADV,EACUA,YACVQ,EAAmBrB,EAAQsB,QAAO,SAACC,GAAD,OACtCA,EAAMrB,KAAKsB,cAAcC,SAASZ,EAAYW,kBAGlD,OACE,sBAAK3B,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,6BACC,cAAC,EAAD,CACAU,YAAY,kBACZC,aACC,SAAAkB,GAAC,OAAE,EAAKP,SAAS,CAACN,YAAYa,EAAEC,OAAOC,QAAO,kBAAIC,QAAQC,IAAI,EAAKlB,aAGrE,cAAC,EAAD,CAAUZ,QAASqB,W,GA1BPU,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5dad15b0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport const Card=props=>(\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n        <h1>{props.monster.name}</h1>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);","import React from 'react';\r\nimport {Card} from '../card_temp/card.component';\r\n\r\nimport './card-list.style.css'\r\nexport const CardList=props=>(\r\n    <div className='card-list'>\r\n {props.monster.map(monster =>(\r\n  <Card key={monster.id} monster={monster}/>\r\n  ))}\r\n  </div>);","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\n\r\nexport const SearchBox =({placeholder,handleChange})=>(\r\n    <input className='search'\r\n     type='search'\r\n      placeholder={placeholder}\r\n       onChange={handleChange}/>\r\n)\r\n\r\n","import './App.css';\nimport {CardList} from './component/Card/card-list.component';\nimport { Component } from 'react';\nimport { SearchBox } from './component/search-box/search-box';\n\n \nclass App extends Component {\n constructor(){\n  super();\n  this.state={\n    monster:[],\n    searchField:''\n  };}\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users').then(resp=>resp.json()).\n    then(users=>this.setState({monster:users}));\n  }\n  render(){\n    const {monster, searchField} = this.state;\n    const filteredMonsters = monster.filter((monst)=>\n      monst.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n\n  return (\n    <div className=\"App\">\n      <h1 className='Title'>Monster-Rolodex</h1>\n       <SearchBox\n       placeholder='search monsters'\n       handleChange={\n        e=>this.setState({searchField:e.target.value},()=>console.log(this.state)\n        )}\n       ></SearchBox>\n      <CardList monster={filteredMonsters}>{\n       \n      }</CardList>\n      \n    </div>\n  );}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}